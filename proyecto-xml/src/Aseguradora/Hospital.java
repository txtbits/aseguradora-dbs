/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Aseguradora;

import java.io.File;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.SAXException;
import javax.swing.*;
import java.awt.*;
import java.io.FileNotFoundException;
import javax.xml.transform.OutputKeys;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.transform.TransformerException;
import java.io.FileOutputStream;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Miguel
 */
public class Hospital extends javax.swing.JFrame {

    Document document;
    DefaultTableModel tableModelHospital;
    DefaultTableModel tableModelMedico;
    
    /**
     * Creates new form Hospital
     */
    public Hospital() throws ParserConfigurationException, SAXException, IOException {
        initComponents();
        cargarHospitales();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbInsertar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jbInsertar.setText("Insertar");
        jbInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbInsertarActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {}
        ));
        jScrollPane2.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {}
        ));
        jScrollPane3.setViewportView(jTable2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbInsertar)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jbInsertar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbInsertarActionPerformed

        JPanel panel = new JPanel();

        panel.setLayout(new GridLayout(4, 1));

        JLabel lbCodh = new JLabel("Código Hospital");
        JLabel lbCodm = new JLabel("Código Médico");
        JLabel lbNomm = new JLabel("Nombre Médico");

        JTextField tfCodh = new JTextField(12);
        JTextField tfCodm = new JTextField(12);
        JTextField tfNomm = new JTextField(12);

        panel.add(lbCodh);
        panel.add(tfCodh);
        panel.add(lbCodm);
        panel.add(tfCodm);
        panel.add(lbNomm);
        panel.add(tfNomm);

        int res = JOptionPane.showConfirmDialog(
                null, panel, "INTRODUZCA UN MÉDICO:", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);

        if (res == JOptionPane.OK_OPTION) {
            NodeList nodes = document.getElementsByTagName("HOSPITAL");
            try {
                proccessNodeInsert(nodes,tfCodh.getText(),tfCodm.getText(),tfNomm.getText());
            } catch (TransformerConfigurationException ex) {
                Logger.getLogger(Hospital.class.getName()).log(Level.SEVERE, null, ex);
            } catch (    TransformerException | FileNotFoundException ex) {
                Logger.getLogger(Hospital.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            JOptionPane.showMessageDialog(null,
                    "Medico insertado correctamente",
                    "",
                    JOptionPane.INFORMATION_MESSAGE,
                    null);

            try {
                cargarHospitales();
            } catch (    ParserConfigurationException | SAXException | IOException ex) {
                Logger.getLogger(Hospital.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jbInsertarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Hospital.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Hospital().setVisible(true);
                } catch (        ParserConfigurationException | SAXException | IOException ex) {
                    Logger.getLogger(Hospital.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton jbInsertar;
    // End of variables declaration//GEN-END:variables

    private void cargarHospitales() throws ParserConfigurationException, SAXException, IOException {
        final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        
        String[] colNameHospital = { "Código Hospital", "Nombre Hospital", "Número de camas"};
        tableModelHospital = (DefaultTableModel) jTable1.getModel();
        tableModelHospital.setColumnIdentifiers(colNameHospital);
        
        String[] colNameMedico = { "Código Médico", "Nombre Médico"};
        tableModelMedico = (DefaultTableModel) jTable2.getModel();
        tableModelMedico.setColumnIdentifiers(colNameMedico);

        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()){
                    tableModelMedico.getDataVector().removeAllElements();
                    String valueCodH = (jTable1.getSelectedRow() == -1) ? null : jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString();
                    NodeList hospitales = document.getElementsByTagName("HOSPITAL");
                    if(valueCodH != null)
                        proccesNodeMedicos(hospitales, valueCodH, 0);
                }
            }
        });
        
        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            document = builder.parse(new File("HOSPITAL_MEDICOS.xml"));
            document.getDocumentElement().normalize();
            NodeList hospitales = document.getElementsByTagName("HOSPITAL");
            proccessNodeHospital(hospitales);
        } catch (ParserConfigurationException | SAXException | IOException e) {
            e.printStackTrace();
        }
    }

    public void proccesNodeMedicos(NodeList n, String valueCodH, int checkMedicos){
        for (int i = 0; i < n.getLength(); i++) {
            Element element = (Element) n.item(i);
            NodeList nl = element.getChildNodes();
            int length = nl.getLength();
            //checkMedicos es 0 la primera vez que entra, es 1 una vez que ha detectado que hay médicos
            if (checkMedicos == 0){
                for (int o = 0; o < length; o++) {
                    Node node = nl.item(o);
                    Node node2 = nl.item(length-2);
                    if("CODHOSPITAL".equals(node.getNodeName()) && Integer.parseInt(node.getTextContent()) == Integer.parseInt(valueCodH)){
                                    if("MEDICOS".equals(node2.getNodeName())){
                                        Element element2 = (Element) node2;
                                        NodeList nl2 = element2.getElementsByTagName("MEDICO");
                                        proccesNodeMedicos(nl2, null, 1);
                                    }else{
                                        System.out.println("Este hospital no tiene médicos");
                                        tableModelMedico.getDataVector().removeAllElements();
                                        tableModelMedico.fireTableDataChanged();
                                    }
                    }
                }
            }else if (checkMedicos == 1){
                String[] dataMedicos = new String[2];
                int a = 0;
                for (int o = 0; o < length; o++) {
                    Node node = nl.item(o);
                    if (node.getNodeType() == Node.ELEMENT_NODE) {
                        dataMedicos[a] = node.getTextContent();
                        a++;
                    }
                }
                tableModelMedico.addRow(dataMedicos);
            }
            

        }
    }
    
    public void proccessNodeInsert(NodeList n, String codh, String codm, String nomm) throws TransformerConfigurationException, TransformerException, FileNotFoundException{
        for (int i = 0; i < n.getLength(); i++) {
            Element element = (Element) n.item(i);
            NodeList nl = element.getChildNodes();
            int length = nl.getLength();
            
            for (int o = 0; o < length; o++) {
                Node node = nl.item(o);
                Node node2 = nl.item(length-2);
                
                if("CODHOSPITAL".equals(node.getNodeName()) && Integer.parseInt(node.getTextContent()) == Integer.parseInt(codh)){
                    Text tcodmedico = document.createTextNode(codm);
                    Text tnommedico = document.createTextNode(nomm);

                    Element emedico = document.createElement("MEDICO");
                    Element ecodmedico = document.createElement("CODMEDICO");
                    Element enommedico = document.createElement("NOMMEDICO");

                    ecodmedico.appendChild(tcodmedico);
                    enommedico.appendChild(tnommedico);

                    emedico.appendChild(ecodmedico);
                    emedico.appendChild(enommedico);
                    
                    if("MEDICOS".equals(node2.getNodeName())){
                        System.out.println("Hay médicos");
                        Element hospitalSeleccionado = (Element) node2;
                        hospitalSeleccionado.appendChild(emedico);
                    }else{
                        System.out.println("No hay médicos");
                        Element emedicos = document.createElement("MEDICOS");
                        emedicos.appendChild(emedico);
                        Element hospitalSeleccionado = (Element) node2.getParentNode();
                        hospitalSeleccionado.appendChild(emedicos);
                    }
                    
                    Transformer tf = TransformerFactory.newInstance().newTransformer();
                    tf.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
                    tf.setOutputProperty(OutputKeys.INDENT, "yes");
                    StreamResult result = new StreamResult(new FileOutputStream("HOSPITAL_MEDICOS.xml"));
                    tf.transform(new DOMSource(document),result);
                }
                
            }
        }
    }
    
    public void proccessNodeHospital(NodeList nl) {
        for (int i = 0; i < nl.getLength(); i++) {
            Element element = (Element) nl.item(i);
            NodeList nlh = element.getChildNodes();
            int e = 0;
            String[] data = new String[3];

            for (int p = 0; p < nlh.getLength(); p++) {
                Node node = nlh.item(p);

                if (node.getNodeType() == Node.ELEMENT_NODE) {
                    if(e<3){
                        data[e] = node.getTextContent();
                        e++;
                    }

                }

            }
            tableModelHospital.addRow(data);
        }
    }
    
}
